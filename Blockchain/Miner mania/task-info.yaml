type: edu
custom_name: stage3
files:
- name: src/blockchain/Main.java
  visible: true
  text: |
    package blockchain;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/BlockchainTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (lines.size() != 11) {
                throw new BlockParseException("Every block should " +
                    "contain 11 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                    "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                    "should start with \"Created by\"");
            }

            if (!lines.get(2).startsWith("Id:")) {
                throw new BlockParseException("Third line of every block " +
                    "should start with \"Id:\"");
            }

            String id = lines.get(2).split(":")[1]
                .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(3).startsWith("Timestamp:")) {
                throw new BlockParseException("4-th line of every block " +
                    "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(3).split(":")[1]
                .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(4).startsWith("Magic number:")) {
                throw new BlockParseException("5-th line of every block " +
                    "should start with \"Magic number:\"");
            }

            String magic = lines.get(4).split(":")[1]
                .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(5).equals("Hash of the previous block:")) {
                throw new BlockParseException("6-th line of every block " +
                    "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(7).equals("Hash of the block:")) {
                throw new BlockParseException("8-th line of every block " +
                    "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(6).strip();
            String hash = lines.get(8).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                    "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<>(),
                new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                    "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 5) {
                return new CheckResult(false,
                    "You should output 5 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                        "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                        "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                        "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/blockchain/Blockchain.java
  visible: true
  text: |-
    package blockchain;

    import blockchain.component.Block;
    import blockchain.component.Block.ProofOfWork;
    import blockchain.utils.SerializationUtils;

    import java.io.File;
    import java.io.IOException;
    import java.io.Serializable;
    import java.nio.file.Path;
    import java.util.LinkedList;
    import java.util.List;

    public class Blockchain implements Serializable {
        private static final long serialVersionUID = 1L;
        private static final Path blockChainPath = Path.of("blockChain.bin");

        private final List<Block> blocks = new LinkedList<>();

        public static Blockchain load(int miningDifficulty) throws IOException, ClassNotFoundException {
            ProofOfWork.difficulty = miningDifficulty;
            final var blockChainFile = blockChainPath.toFile();

            return blockChainFile.exists()
                    ? BlockChainLoader.load(blockChainFile)
                    : newBlockChainWithRoot();
        }

        private static Blockchain newBlockChainWithRoot() {
            return new Blockchain(Block.root());
        }

        public Blockchain(Block root) {
            add(root);
        }

        public void add(Block block) {
            if (isRoot() || isValid(block)) {
                blocks.add(block);
                save();
            }
        }

        private void save() {
            try {
                SerializationUtils.serialize(this, blockChainPath.toFile());

            } catch (IOException exception) {
                throw new RuntimeException(String.format("Cannot open %s", blockChainPath), exception.getCause());
            }
        }

        public boolean isEmpty() {
            return blocks.isEmpty();
        }

        public int size() {
            return blocks.size();
        }

        public Block getLatestBlock() {
            return blocks.get(size() - 1);
        }

        public List<Block> getBlocks() {
            return new LinkedList<>(blocks);
        }

        private boolean isRoot() {
            return isEmpty();
        }

        private boolean isValid(Block block) {
            return block.getPreviousHash().equals(getLatestBlock().getHash());
        }

        private static class BlockChainLoader {

            public static Blockchain load(File blockChainFile) throws IOException, ClassNotFoundException {
                final var loadedBlockChain = (Blockchain) SerializationUtils.deserialize(blockChainFile);
                final var blocks = loadedBlockChain.getBlocks();

                var isValidChain = true;

                for (Block block : blocks) {
                    if (!ProofOfWork.isValid(block.getHash())) {
                        isValidChain = false;

                        return newBlockChainWithRoot();
                    }
                }

                return loadedBlockChain;
            }
        }
    }
  learner_created: true
- name: blockChain.bin
  visible: true
  text: rO0ABXNyABVibG9ja2NoYWluLkJsb2NrY2hhaW4AAAAAAAAAAQIAAUwABmJsb2Nrc3QAEExqYXZhL3V0aWwvTGlzdDt4cHNyABRqYXZhLnV0aWwuTGlua2VkTGlzdAwpU11KYIgiAwAAeHB3BAAAAAVzcgAaYmxvY2tjaGFpbi5jb21wb25lbnQuQmxvY2sAAAAAAAAAAQIAAUwACWJsb2NrRGF0YXQAJkxibG9ja2NoYWluL2NvbXBvbmVudC9CbG9jayRCbG9ja0RhdGE7eHBzcgAkYmxvY2tjaGFpbi5jb21wb25lbnQuQmxvY2skQmxvY2tEYXRhAAAAAAAAAAECAAZKAAptaW5pbmdUaW1lSgAJdGltZXN0YW1wTAAEaGFzaHQAEkxqYXZhL2xhbmcvU3RyaW5nO0wAAmlkdAAWTGphdmEvbWF0aC9CaWdJbnRlZ2VyO0wABW5vbmNldAATTGphdmEvbGFuZy9JbnRlZ2VyO0wADHByZXZpb3VzSGFzaHEAfgAJeHAAAAAAAAAAAAAAAX7fnVJLdABAMDAxNDcxZGZjNmU2YmE2MzZiNmZlYTYwYTc0NzIwMTAzNWUwMTk5MTUwM2RkMmM5YzYwMjY1ZTFmM2M2YTI0MnNyABRqYXZhLm1hdGguQmlnSW50ZWdlcoz8nx+pO/sdAwAGSQAIYml0Q291bnRJAAliaXRMZW5ndGhJABNmaXJzdE5vbnplcm9CeXRlTnVtSQAMbG93ZXN0U2V0Qml0SQAGc2lnbnVtWwAJbWFnbml0dWRldAACW0J4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHD///////////////7////+AAAAAXVyAAJbQqzzF/gGCFTgAgAAeHAAAAABAXhzcgARamF2YS5sYW5nLkludGVnZXIS4qCk94GHOAIAAUkABXZhbHVleHEAfgAQAAAAD3QAATBzcQB+AAVzcQB+AAgAAAAAAAAAAAAAAX7fnVJNdABAMDBjNDI4ODdkYWUyMzM5NGU3MmJjNGI3N2UyZWJjNGJmNmJlYTNhYmNhN2FkYTk0NWQ2ZTc5MDk2MWQ0ZTZkNHNxAH4ADv///////////////v////4AAAABdXEAfgASAAAAAQJ4c3EAfgAUAAAAzXEAfgANc3EAfgAFc3EAfgAIAAAAAAAAAAAAAAF+351SUHQAQDAwOGM3YWM4ZGZkZDI2OGZlMTQ3ZDY5YTVjZjdlNmNhMzUxM2JlNzI3MTY0YzI1ZmY3ZTM3OTQwOWFiNGQ3NzZzcQB+AA7///////////////7////+AAAAAXVxAH4AEgAAAAEDeHNxAH4AFAAAAcNxAH4AGXNxAH4ABXNxAH4ACAAAAAAAAAAAAAABft+dUlN0AEAwMDBiNmQxZGJmYjdjYTA2ODJlMDA3MDdjZWRkMzhmZjEwMzNkOTI0MThkYWYzNmE4ZWMwZTdkNDVmZDA0ZThlc3EAfgAO///////////////+/////gAAAAF1cQB+ABIAAAABBHhzcQB+ABQAAADAcQB+AB9zcQB+AAVzcQB+AAgAAAAAAAAAAAAAAX7fnVJVdABAMDBmOGY4Zjc0YjI4MDhhM2ZhMWQxOTNkNDM3ZTcxZTU1MTc0YjdlY2UyN2M3ZjA2NmYzNWJiMGRjYjBiYzUwNXNxAH4ADv///////////////v////4AAAABdXEAfgASAAAAAQV4c3EAfgAUAAABdXEAfgAleA==
  learner_created: true
- name: src/blockchain/Executor.java
  visible: true
  learner_created: true
- name: src/blockchain/SerializationUtils.java
  visible: true
  text: |
    package blockchain.utils;

    import java.io.*;

    public class SerializationUtils {
        /**
         * Serialize the given object to the file
         */
        public static void serialize(Object obj, File file) throws IOException {
            final var fos = new FileOutputStream(file);
            final var bos = new BufferedOutputStream(fos);
            final var oos = new ObjectOutputStream(bos);

            oos.writeObject(obj);
            oos.close();
        }

        /**
         * Deserialize to an object from the file
         */
        public static Object deserialize(File file) throws IOException, ClassNotFoundException {
            final var fis = new FileInputStream(file);
            final var bis = new BufferedInputStream(fis);
            final var ois = new ObjectInputStream(bis);

            Object obj = ois.readObject();
            ois.close();

            return obj;
        }
    }
  learner_created: true
- name: src/blockchain/StringUtil.java
  visible: true
  text: |
    package blockchain.utils;

    import java.security.MessageDigest;

    public class StringUtil {
        /* Applies Sha256 to a string and returns a hash. */
        public static String applySha256(String input){
            try {
                MessageDigest digest = MessageDigest.getInstance("SHA-256");
                /* Applies sha256 to our input */
                byte[] hash = digest.digest(input.getBytes("UTF-8"));
                StringBuilder hexString = new StringBuilder();
                for (byte elem: hash) {
                    String hex = Integer.toHexString(0xff & elem);
                    if(hex.length() == 1) {
                        hexString.append('0');
                    }
                    hexString.append(hex);
                }
                return hexString.toString();
            }
            catch(Exception e) {
                throw new RuntimeException(e);
            }
        }
    }
  learner_created: true
- name: src/blockchain/resources/blockchain.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/50/stages/273/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 19 Feb 2022 14:18:00 UTC
record: 3
