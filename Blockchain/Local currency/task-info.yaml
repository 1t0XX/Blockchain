type: edu
custom_name: stage6
files:
- name: src/blockchain/Main.java
  visible: true
  text: |
    package blockchain;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/BlockchainTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (lines.size() < 13) {
                throw new BlockParseException("Every block should " +
                    "contain at least 13 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                    "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                    "should start with \"Created by\"");
            }

            if (!lines.get(2).contains("gets 100 VC")) {
                throw new BlockParseException("Third line of every block " +
                    "should contain \"gets 100 VC\"");
            }

            if (!lines.get(3).startsWith("Id:")) {
                throw new BlockParseException("4-th line of every block " +
                    "should start with \"Id:\"");
            }

            String id = lines.get(3).split(":")[1]
                .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(4).startsWith("Timestamp:")) {
                throw new BlockParseException("5-th line of every block " +
                    "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(4).split(":")[1]
                .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(5).startsWith("Magic number:")) {
                throw new BlockParseException("6-th line of every block " +
                    "should start with \"Magic number:\"");
            }

            String magic = lines.get(5).split(":")[1]
                .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(6).equals("Hash of the previous block:")) {
                throw new BlockParseException("7-th line of every block " +
                    "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(8).equals("Hash of the block:")) {
                throw new BlockParseException("9-th line of every block " +
                    "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(7).strip();
            String hash = lines.get(9).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                    "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            if (!lines.get(10).startsWith("Block data:")) {
                throw new BlockParseException("11-th line of every block " +
                    "should start with \"Block data:\"");
            }

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<>(),
                new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                    "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 15) {
                return new CheckResult(false,
                    "In this stage you should output 15 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                        "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                        "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                        "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: blockChain.bin
  visible: true
  text: rO0ABXNyABVibG9ja2NoYWluLkJsb2NrY2hhaW4AAAAAAAAAAQIAAUwABmJsb2Nrc3QAEExqYXZhL3V0aWwvTGlzdDt4cHNyABRqYXZhLnV0aWwuTGlua2VkTGlzdAwpU11KYIgiAwAAeHB3BAAAAAVzcgAaYmxvY2tjaGFpbi5jb21wb25lbnQuQmxvY2sAAAAAAAAAAQIAAUwACWJsb2NrRGF0YXQAJkxibG9ja2NoYWluL2NvbXBvbmVudC9CbG9jayRCbG9ja0RhdGE7eHBzcgAkYmxvY2tjaGFpbi5jb21wb25lbnQuQmxvY2skQmxvY2tEYXRhAAAAAAAAAAECAAZKAAptaW5pbmdUaW1lSgAJdGltZXN0YW1wTAAEaGFzaHQAEkxqYXZhL2xhbmcvU3RyaW5nO0wAAmlkdAAWTGphdmEvbWF0aC9CaWdJbnRlZ2VyO0wABW5vbmNldAATTGphdmEvbGFuZy9JbnRlZ2VyO0wADHByZXZpb3VzSGFzaHEAfgAJeHAAAAAAAAAAAAAAAX7fnVJLdABAMDAxNDcxZGZjNmU2YmE2MzZiNmZlYTYwYTc0NzIwMTAzNWUwMTk5MTUwM2RkMmM5YzYwMjY1ZTFmM2M2YTI0MnNyABRqYXZhLm1hdGguQmlnSW50ZWdlcoz8nx+pO/sdAwAGSQAIYml0Q291bnRJAAliaXRMZW5ndGhJABNmaXJzdE5vbnplcm9CeXRlTnVtSQAMbG93ZXN0U2V0Qml0SQAGc2lnbnVtWwAJbWFnbml0dWRldAACW0J4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHD///////////////7////+AAAAAXVyAAJbQqzzF/gGCFTgAgAAeHAAAAABAXhzcgARamF2YS5sYW5nLkludGVnZXIS4qCk94GHOAIAAUkABXZhbHVleHEAfgAQAAAAD3QAATBzcQB+AAVzcQB+AAgAAAAAAAAAAAAAAX7fnVJNdABAMDBjNDI4ODdkYWUyMzM5NGU3MmJjNGI3N2UyZWJjNGJmNmJlYTNhYmNhN2FkYTk0NWQ2ZTc5MDk2MWQ0ZTZkNHNxAH4ADv///////////////v////4AAAABdXEAfgASAAAAAQJ4c3EAfgAUAAAAzXEAfgANc3EAfgAFc3EAfgAIAAAAAAAAAAAAAAF+351SUHQAQDAwOGM3YWM4ZGZkZDI2OGZlMTQ3ZDY5YTVjZjdlNmNhMzUxM2JlNzI3MTY0YzI1ZmY3ZTM3OTQwOWFiNGQ3NzZzcQB+AA7///////////////7////+AAAAAXVxAH4AEgAAAAEDeHNxAH4AFAAAAcNxAH4AGXNxAH4ABXNxAH4ACAAAAAAAAAAAAAABft+dUlN0AEAwMDBiNmQxZGJmYjdjYTA2ODJlMDA3MDdjZWRkMzhmZjEwMzNkOTI0MThkYWYzNmE4ZWMwZTdkNDVmZDA0ZThlc3EAfgAO///////////////+/////gAAAAF1cQB+ABIAAAABBHhzcQB+ABQAAADAcQB+AB9zcQB+AAVzcQB+AAgAAAAAAAAAAAAAAX7fnVJVdABAMDBmOGY4Zjc0YjI4MDhhM2ZhMWQxOTNkNDM3ZTcxZTU1MTc0YjdlY2UyN2M3ZjA2NmYzNWJiMGRjYjBiYzUwNXNxAH4ADv///////////////v////4AAAABdXEAfgASAAAAAQV4c3EAfgAUAAABdXEAfgAleA==
  learner_created: true
- name: src/blockchain/resources/blockchain.txt
  visible: true
  text: "��\0\x05sr\0\x14java.util.LinkedList\f)S]J`�\"\x03\0\0xpw\x04\0\0\0\x05sr\0\
    \eblockchain.Blockchain$Block\0\0\0\0\0\0\0\x01\x02\0\aJ\0\x02idJ\0\vmagicNumberJ\0\
    \x10timeOfGeneratingJ\0\ttimestampL\0\x04hasht\0\x12Ljava/lang/String;L\0\tminerNameq\0\
    ~\0\x03L\0\fpreviousHashq\0~\0\x03xp\0\0\0\0\0\0\0\x01\0\0\0\0,h\x15Q\0\0\0\0\0\
    \0\0\0\0\0\x01\x7f\x12X�vt\0@df094ccb8dafdc7f2b840aeb2c31ff3482e8e3648a4e6e737fabb43377914bc1t\0\
    \x015t\0\x010sq\0~\0\x02\0\0\0\0\0\0\0\x02\0\0\0\0\x18.:�\0\0\0\0\0\0\0\0\0\0\x01\
    \x7f\x12X�~t\0@0b0c4e1b94b9e7f10fc9dfd8c5c84bd53664e9de8f0ce58221d3d0443b0c35f6t\0\
    \x011q\0~\0\x05sq\0~\0\x02\0\0\0\0\0\0\0\x03\0\0\0\0m.?\x11\0\0\0\0\0\0\0\0\0\0\
    \x01\x7f\x12X��t\0@00e35186c0c2ca919f6b516357b1b91e896ca96709f26eb89e05b089d5b3b05ft\0\
    \x013q\0~\0\tsq\0~\0\x02\0\0\0\0\0\0\0\x04\0\0\0\0\\���\0\0\0\0\0\0\0\0\0\0\x01\
    \x7f\x12X��t\0@000967942c3ec3101447dbdd6d052be98da0e2e046ede76f0aff865fc74dd1ebt\0\
    \x014q\0~\0\fsq\0~\0\x02\0\0\0\0\0\0\0\x05\0\0\0\0\v��\a\0\0\0\0\0\0\0\0\0\0\x01\
    \x7f\x12X��t\0@0000025fa82599d49bb8535ed2f97f14846d15dcb17fe8d6b52dc848a1196856t\0\
    \x012q\0~\0\x0fx"
  learner_created: true
- name: src/blockchain/Blockchain.java
  visible: true
  text: |-
    package blockchain;

    import java.io.Serializable;
    import java.security.*;
    import java.util.ArrayDeque;
    import java.util.Deque;

    public class Blockchain implements Serializable {

        private static final int MAX_NUM_OF_BLOCKS = 5;
        private static final long serialVersionUID = 7L;

        private final long THERSHOLD_SAME = 10L;
        private final long THERSHOLD_MINUS = 60L;
        private final String N_UPDATE_MINUS = "N was decreased by 1";
        private final String N_UPDATE_SAME = "N stays the same";
        private final String N_UPDATE_PLUS = "N was increased to ";


        private static volatile Blockchain instance;
        private static Deque<Block> blocksList = new ArrayDeque<>();
        private static int numOfStartingZeros;
        private static Block blockUnderConstruction;

        private Blockchain(){
            numOfStartingZeros = 0;
            blockUnderConstruction = new Block(null);
        }

        public static Blockchain getInstance() {
            if (instance == null) {
                instance = new Blockchain();
            }
            return instance;
        }

        public boolean isValid() {
            String actualHashOfPrevious = "0";
            for (Block block : blocksList) {
                if ( !actualHashOfPrevious.equals(block.getHashOfPrevious() ) ) {
                    return false;
                }
                actualHashOfPrevious = block.getHash();
            }
            return true;
        }

        public synchronized void receiveFromUser(User user, String messageContent) throws NoSuchAlgorithmException, SignatureException, InvalidKeyException {
            if (!blocksList.isEmpty()) {
                blockUnderConstruction.addMessage( user.getName(), createMessage(user.sign(), user.getPublicKey(), user.getPrivateKey(), messageContent) );
            }
        }

        private synchronized Message createMessage(byte[] userSignature, PublicKey publicKey, PrivateKey privateKey, String messageContent) throws NoSuchAlgorithmException, SignatureException, InvalidKeyException {
            long newMessageId = IdCounter.generateMessageId();
            return new Message(newMessageId, generateSignature(newMessageId, userSignature, messageContent, privateKey), messageContent, publicKey);
        }

        private synchronized byte[] generateSignature(long newMessageId, byte[] userSignature, String messageContent, PrivateKey privateKey) throws NoSuchAlgorithmException, InvalidKeyException, SignatureException {
            Signature rsa = Signature.getInstance("SHA1withRSA");
            rsa.initSign( privateKey );
            rsa.update( userSignature );
            return rsa.sign();
        }

        public synchronized void receiveFromMiner(int minerId, String hash, long magicNum, long timeToGenerate) {
            if ( hash.substring(0, numOfStartingZeros).matches("0*") )  {
                concludeBlock(minerId, hash, magicNum, timeToGenerate);
            }
        }

        private synchronized void concludeBlock(int minerId, String hash, long magicNum, long timeToGenerate) {
            blockUnderConstruction.setThreadId(minerId);
            blockUnderConstruction.setHash(hash);
            blockUnderConstruction.setMagicNum(magicNum);
            blockUnderConstruction.setTimeToGenerate(timeToGenerate);
            if (blockUnderConstruction.getTimeToGenerate() > THERSHOLD_MINUS ) {
                numOfStartingZeros--;
                blockUnderConstruction.setNUpdateMessage( N_UPDATE_MINUS );
            } else if ( blockUnderConstruction.getTimeToGenerate() > THERSHOLD_SAME ) {
                blockUnderConstruction.setNUpdateMessage( N_UPDATE_SAME );
            } else {
                numOfStartingZeros++;
                blockUnderConstruction.setNUpdateMessage( N_UPDATE_PLUS + Blockchain.getInstance().getNumOfStartingZeros() );
            }
            blocksList.addLast(blockUnderConstruction);
            System.out.println( blockUnderConstruction );
            startNewBlock();
        }

        private void startNewBlock() {
            blockUnderConstruction = new Block( instance.getBlocksList().getLast() );
        }

        public void setBlocksList(Deque<Block> blocksList) {
            Blockchain.blocksList = blocksList;
        }

        public Deque<Block> getBlocksList() {
            return blocksList;
        }

        public int getNumOfStartingZeros() {
            return numOfStartingZeros;
        }

        public boolean underConstruction() {
            return blocksList.size() < MAX_NUM_OF_BLOCKS;
        }

        public Block getBlockUnderConstruction() {
            return blockUnderConstruction;
        }
    }
  learner_created: true
- name: src/blockchain/MyBlockchain.java
  visible: true
  learner_created: true
- name: src/blockchain/block/Block.java
  visible: true
  learner_created: true
- name: src/blockchain/block/BlockParams.java
  visible: true
  learner_created: true
- name: src/blockchain/block/ImmutableBlock.java
  visible: true
  learner_created: true
- name: src/blockchain/block/ImmutablePartBlockParams.java
  visible: true
  learner_created: true
- name: src/blockchain/block/NZerosBlock.java
  visible: true
  learner_created: true
- name: src/blockchain/block/PartBlockParams.java
  visible: true
  learner_created: true
- name: src/blockchain/block/SimpleBlockParams.java
  visible: true
  learner_created: true
- name: src/blockchain/data/Data.java
  visible: true
  learner_created: true
- name: src/blockchain/data/DataParams.java
  visible: true
  learner_created: true
- name: src/blockchain/data/DataProducer.java
  visible: true
  learner_created: true
- name: src/blockchain/data/ImmutableDataParams.java
  visible: true
  learner_created: true
- name: src/blockchain/data/Message.java
  visible: true
  learner_created: true
- name: src/blockchain/data/MessageProducer.java
  visible: true
  learner_created: true
- name: src/blockchain/data/MessageProducerParams.java
  visible: true
  learner_created: true
- name: src/blockchain/data/SignedData.java
  visible: true
  learner_created: true
- name: src/blockchain/data/SignedMessage.java
  visible: true
  learner_created: true
- name: src/blockchain/data/SignedMessageProducer.java
  visible: true
  learner_created: true
- name: src/blockchain/data/SignedTransaction.java
  visible: true
  learner_created: true
- name: src/blockchain/data/Transaction.java
  visible: true
  learner_created: true
- name: src/blockchain/hash/HashApprover.java
  visible: true
  learner_created: true
- name: src/blockchain/hash/HashFunction.java
  visible: true
  learner_created: true
- name: src/blockchain/hash/NZerosHashApprover.java
  visible: true
  learner_created: true
- name: src/blockchain/hash/SHA256HashFunction.java
  visible: true
  learner_created: true
- name: src/blockchain/mining/ComputeMiner.java
  visible: true
  learner_created: true
- name: src/blockchain/mining/Miner.java
  visible: true
  learner_created: true
- name: src/blockchain/mining/MinerParams.java
  visible: true
  learner_created: true
- name: src/blockchain/mining/SimpleMinerParams.java
  visible: true
  learner_created: true
- name: src/blockchain/reward/Reward.java
  visible: true
  learner_created: true
- name: src/blockchain/reward/VirtualCoin.java
  visible: true
  learner_created: true
- name: src/blockchain/util/CommonUtils.java
  visible: true
  learner_created: true
- name: src/blockchain/util/Cryptographer.java
  visible: true
  learner_created: true
- name: src/blockchain/util/KeysGenerator.java
  visible: true
  learner_created: true
- name: src/blockchain/util/NZeros.java
  visible: true
  learner_created: true
- name: src/blockchain/util/RSACryptographer.java
  visible: true
  learner_created: true
- name: src/blockchain/util/RSAGenerator.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/50/stages/276/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 08 Mar 2022 15:57:09 UTC
record: -1
